/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  f32,
  struct,
  u64,
} from '@metaplex-foundation/umi/serializers';

export type StatsBucketAccount = Account<StatsBucketAccountAccountData>;

export type StatsBucketAccountAccountData = {
  variance: number;
  correctedVariance: number;
  stdev: number;
  correctedStdev: number;
  skewness: number;
  excessKurtosis: number;
  n: bigint;
  mean: number;
  minimum: number;
  maximum: number;
  moments: Array<number>;
};

export type StatsBucketAccountAccountDataArgs = {
  variance: number;
  correctedVariance: number;
  stdev: number;
  correctedStdev: number;
  skewness: number;
  excessKurtosis: number;
  n: number | bigint;
  mean: number;
  minimum: number;
  maximum: number;
  moments: Array<number>;
};

export function getStatsBucketAccountAccountDataSerializer(): Serializer<
  StatsBucketAccountAccountDataArgs,
  StatsBucketAccountAccountData
> {
  return struct<StatsBucketAccountAccountData>(
    [
      ['variance', f32()],
      ['correctedVariance', f32()],
      ['stdev', f32()],
      ['correctedStdev', f32()],
      ['skewness', f32()],
      ['excessKurtosis', f32()],
      ['n', u64()],
      ['mean', f32()],
      ['minimum', f32()],
      ['maximum', f32()],
      ['moments', array(f32(), { size: 10 })],
    ],
    { description: 'StatsBucketAccountAccountData' }
  ) as Serializer<
    StatsBucketAccountAccountDataArgs,
    StatsBucketAccountAccountData
  >;
}

export function deserializeStatsBucketAccount(
  rawAccount: RpcAccount
): StatsBucketAccount {
  return deserializeAccount(
    rawAccount,
    getStatsBucketAccountAccountDataSerializer()
  );
}

export async function fetchStatsBucketAccount(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<StatsBucketAccount> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'StatsBucketAccount');
  return deserializeStatsBucketAccount(maybeAccount);
}

export async function safeFetchStatsBucketAccount(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<StatsBucketAccount | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists
    ? deserializeStatsBucketAccount(maybeAccount)
    : null;
}

export async function fetchAllStatsBucketAccount(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<StatsBucketAccount[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'StatsBucketAccount');
    return deserializeStatsBucketAccount(maybeAccount);
  });
}

export async function safeFetchAllStatsBucketAccount(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<StatsBucketAccount[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeStatsBucketAccount(maybeAccount as RpcAccount)
    );
}

export function getStatsBucketAccountGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'statsBucket',
    'C7DVvsaSQ1k7XcUXoAh9gZyGs6Ki9Qg9zpriBbrcx6tm'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      variance: number;
      correctedVariance: number;
      stdev: number;
      correctedStdev: number;
      skewness: number;
      excessKurtosis: number;
      n: number | bigint;
      mean: number;
      minimum: number;
      maximum: number;
      moments: Array<number>;
    }>({
      variance: [0, f32()],
      correctedVariance: [4, f32()],
      stdev: [8, f32()],
      correctedStdev: [12, f32()],
      skewness: [16, f32()],
      excessKurtosis: [20, f32()],
      n: [24, u64()],
      mean: [32, f32()],
      minimum: [36, f32()],
      maximum: [40, f32()],
      moments: [44, array(f32(), { size: 10 })],
    })
    .deserializeUsing<StatsBucketAccount>((account) =>
      deserializeStatsBucketAccount(account)
    );
}

export function getStatsBucketAccountSize(): number {
  return 84;
}
