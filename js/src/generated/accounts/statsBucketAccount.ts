/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'

/**
 * Arguments used to create {@link StatsBucketAccount}
 * @category Accounts
 * @category generated
 */
export type StatsBucketAccountArgs = {
  variance: beet.bignum
  correctedVariance: beet.bignum
  stdev: beet.bignum
  correctedStdev: beet.bignum
  skewness: beet.bignum
  excessKurtosis: beet.bignum
  n: number
  mean: beet.bignum
  minimum: beet.bignum
  maximum: beet.bignum
  moments: beet.bignum[] /* size: 10 */
}
/**
 * Holds the data for the {@link StatsBucketAccount} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class StatsBucketAccount implements StatsBucketAccountArgs {
  private constructor(
    readonly variance: beet.bignum,
    readonly correctedVariance: beet.bignum,
    readonly stdev: beet.bignum,
    readonly correctedStdev: beet.bignum,
    readonly skewness: beet.bignum,
    readonly excessKurtosis: beet.bignum,
    readonly n: number,
    readonly mean: beet.bignum,
    readonly minimum: beet.bignum,
    readonly maximum: beet.bignum,
    readonly moments: beet.bignum[] /* size: 10 */
  ) {}

  /**
   * Creates a {@link StatsBucketAccount} instance from the provided args.
   */
  static fromArgs(args: StatsBucketAccountArgs) {
    return new StatsBucketAccount(
      args.variance,
      args.correctedVariance,
      args.stdev,
      args.correctedStdev,
      args.skewness,
      args.excessKurtosis,
      args.n,
      args.mean,
      args.minimum,
      args.maximum,
      args.moments
    )
  }

  /**
   * Deserializes the {@link StatsBucketAccount} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [StatsBucketAccount, number] {
    return StatsBucketAccount.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link StatsBucketAccount} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<StatsBucketAccount> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find StatsBucketAccount account at ${address}`)
    }
    return StatsBucketAccount.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'C7DVvsaSQ1k7XcUXoAh9gZyGs6Ki9Qg9zpriBbrcx6tm'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, statsBucketAccountBeet)
  }

  /**
   * Deserializes the {@link StatsBucketAccount} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [StatsBucketAccount, number] {
    return statsBucketAccountBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link StatsBucketAccount} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return statsBucketAccountBeet.serialize(this)
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link StatsBucketAccount}
   */
  static get byteSize() {
    return statsBucketAccountBeet.byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link StatsBucketAccount} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      StatsBucketAccount.byteSize,
      commitment
    )
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link StatsBucketAccount} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === StatsBucketAccount.byteSize
  }

  /**
   * Returns a readable version of {@link StatsBucketAccount} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      variance: (() => {
        const x = <{ toNumber: () => number }>this.variance
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      correctedVariance: (() => {
        const x = <{ toNumber: () => number }>this.correctedVariance
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      stdev: (() => {
        const x = <{ toNumber: () => number }>this.stdev
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      correctedStdev: (() => {
        const x = <{ toNumber: () => number }>this.correctedStdev
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      skewness: (() => {
        const x = <{ toNumber: () => number }>this.skewness
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      excessKurtosis: (() => {
        const x = <{ toNumber: () => number }>this.excessKurtosis
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      n: this.n,
      mean: (() => {
        const x = <{ toNumber: () => number }>this.mean
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      minimum: (() => {
        const x = <{ toNumber: () => number }>this.minimum
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      maximum: (() => {
        const x = <{ toNumber: () => number }>this.maximum
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      moments: this.moments,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const statsBucketAccountBeet = new beet.BeetStruct<
  StatsBucketAccount,
  StatsBucketAccountArgs
>(
  [
    ['variance', beet.i64],
    ['correctedVariance', beet.i64],
    ['stdev', beet.i64],
    ['correctedStdev', beet.i64],
    ['skewness', beet.i64],
    ['excessKurtosis', beet.i64],
    ['n', beet.u32],
    ['mean', beet.i64],
    ['minimum', beet.i64],
    ['maximum', beet.i64],
    ['moments', beet.uniformFixedSizeArray(beet.i64, 10)],
  ],
  StatsBucketAccount.fromArgs,
  'StatsBucketAccount'
)
