/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * InvalidSystemProgram: 'Invalid System Program'
 *
 * @category Errors
 * @category generated
 */
export class InvalidSystemProgramError extends Error {
  readonly code: number = 0x0
  readonly name: string = 'InvalidSystemProgram'
  constructor() {
    super('Invalid System Program')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidSystemProgramError)
    }
  }
}

createErrorFromCodeLookup.set(0x0, () => new InvalidSystemProgramError())
createErrorFromNameLookup.set(
  'InvalidSystemProgram',
  () => new InvalidSystemProgramError()
)

/**
 * DeserializationError: 'Error deserializing account'
 *
 * @category Errors
 * @category generated
 */
export class DeserializationErrorError extends Error {
  readonly code: number = 0x1
  readonly name: string = 'DeserializationError'
  constructor() {
    super('Error deserializing account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, DeserializationErrorError)
    }
  }
}

createErrorFromCodeLookup.set(0x1, () => new DeserializationErrorError())
createErrorFromNameLookup.set(
  'DeserializationError',
  () => new DeserializationErrorError()
)

/**
 * SerializationError: 'Error serializing account'
 *
 * @category Errors
 * @category generated
 */
export class SerializationErrorError extends Error {
  readonly code: number = 0x2
  readonly name: string = 'SerializationError'
  constructor() {
    super('Error serializing account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, SerializationErrorError)
    }
  }
}

createErrorFromCodeLookup.set(0x2, () => new SerializationErrorError())
createErrorFromNameLookup.set(
  'SerializationError',
  () => new SerializationErrorError()
)

/**
 * WrongBucketPDA: 'Wrong bucket PDA'
 *
 * @category Errors
 * @category generated
 */
export class WrongBucketPDAError extends Error {
  readonly code: number = 0x3
  readonly name: string = 'WrongBucketPDA'
  constructor() {
    super('Wrong bucket PDA')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongBucketPDAError)
    }
  }
}

createErrorFromCodeLookup.set(0x3, () => new WrongBucketPDAError())
createErrorFromNameLookup.set('WrongBucketPDA', () => new WrongBucketPDAError())

/**
 * WrongSourceBucketPDA: 'Wrong source bucket PDA'
 *
 * @category Errors
 * @category generated
 */
export class WrongSourceBucketPDAError extends Error {
  readonly code: number = 0x4
  readonly name: string = 'WrongSourceBucketPDA'
  constructor() {
    super('Wrong source bucket PDA')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongSourceBucketPDAError)
    }
  }
}

createErrorFromCodeLookup.set(0x4, () => new WrongSourceBucketPDAError())
createErrorFromNameLookup.set(
  'WrongSourceBucketPDA',
  () => new WrongSourceBucketPDAError()
)

/**
 * WrongTargetBucketPDA: 'Wrong target bucket PDA'
 *
 * @category Errors
 * @category generated
 */
export class WrongTargetBucketPDAError extends Error {
  readonly code: number = 0x5
  readonly name: string = 'WrongTargetBucketPDA'
  constructor() {
    super('Wrong target bucket PDA')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, WrongTargetBucketPDAError)
    }
  }
}

createErrorFromCodeLookup.set(0x5, () => new WrongTargetBucketPDAError())
createErrorFromNameLookup.set(
  'WrongTargetBucketPDA',
  () => new WrongTargetBucketPDAError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
