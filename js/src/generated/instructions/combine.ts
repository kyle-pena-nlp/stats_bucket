/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { CombineParams, combineParamsBeet } from '../types/CombineParams'

/**
 * @category Instructions
 * @category Combine
 * @category generated
 */
export type CombineInstructionArgs = {
  combineParams: CombineParams
}
/**
 * @category Instructions
 * @category Combine
 * @category generated
 */
export const CombineStruct = new beet.FixableBeetArgsStruct<
  CombineInstructionArgs & {
    instructionDiscriminator: number
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['combineParams', combineParamsBeet],
  ],
  'CombineInstructionArgs'
)
/**
 * Accounts required by the _Combine_ instruction
 *
 * @property [**signer**] payer
 * @property [] sourceBucket
 * @property [_writable_] targetBucket
 * @category Instructions
 * @category Combine
 * @category generated
 */
export type CombineInstructionAccounts = {
  payer: web3.PublicKey
  sourceBucket: web3.PublicKey
  targetBucket: web3.PublicKey
  systemProgram?: web3.PublicKey
}

export const combineInstructionDiscriminator = 1

/**
 * Creates a _Combine_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Combine
 * @category generated
 */
export function createCombineInstruction(
  accounts: CombineInstructionAccounts,
  args: CombineInstructionArgs,
  programId = new web3.PublicKey('C7DVvsaSQ1k7XcUXoAh9gZyGs6Ki9Qg9zpriBbrcx6tm')
) {
  const [data] = CombineStruct.serialize({
    instructionDiscriminator: combineInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.payer,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.sourceBucket,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.targetBucket,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
