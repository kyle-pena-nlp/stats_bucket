/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { PushParams, pushParamsBeet } from '../types/PushParams'

/**
 * @category Instructions
 * @category Push
 * @category generated
 */
export type PushInstructionArgs = {
  pushParams: PushParams
}
/**
 * @category Instructions
 * @category Push
 * @category generated
 */
export const PushStruct = new beet.FixableBeetArgsStruct<
  PushInstructionArgs & {
    instructionDiscriminator: number
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['pushParams', pushParamsBeet],
  ],
  'PushInstructionArgs'
)
/**
 * Accounts required by the _Push_ instruction
 *
 * @property [**signer**] payer
 * @property [_writable_] bucket
 * @category Instructions
 * @category Push
 * @category generated
 */
export type PushInstructionAccounts = {
  payer: web3.PublicKey
  bucket: web3.PublicKey
  systemProgram?: web3.PublicKey
}

export const pushInstructionDiscriminator = 0

/**
 * Creates a _Push_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Push
 * @category generated
 */
export function createPushInstruction(
  accounts: PushInstructionAccounts,
  args: PushInstructionArgs,
  programId = new web3.PublicKey('C7DVvsaSQ1k7XcUXoAh9gZyGs6Ki9Qg9zpriBbrcx6tm')
) {
  const [data] = PushStruct.serialize({
    instructionDiscriminator: pushInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.payer,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.bucket,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
